import * as THREE from '../three/three.module.js';
import { objectScene } from '../main/main.js';
import { vs, fs } from '../main/shaders.js';

const quadGeometry = new THREE.BufferGeometry();

// 1. Define the vertices for the quad
const quadVertices = new Float32Array( [
    0.0, 0.0, 0.0,
    0.0, 0.0, 1.0,
    1.0, 0.0, 0.0,
    1.0, 0.0, 1.0
] );
  
const quadNormals = new Float32Array( [
    0.0, 1.0,  0.0,
    0.0, 1.0,  0.0,
    0.0, 1.0,  0.0,
    0.0, 1.0,  0.0
] );
  
// const triangleUVs = new Float32Array([0.0, 0.0, 0.0, 1.0, 1.0, 0.0])
const quadColorPickers = new Float32Array( [
    0.0,
    1.0,
    0.0,
    0.0
] );

// 2. Create a BufferGeometry and set the position attribute
quadGeometry.setAttribute( 'position', new THREE.BufferAttribute( quadVertices, 3 ) );
// quadGeometry.setAttribute( 'rgba', new THREE.InstancedBufferAttribute( quadColorPickers, 4 ) );

// 3. (Optionally) Define indices for the quad
const indices = new Uint16Array([
    0, 1, 2,  // First triangle
    2, 1, 3   // Second triangle
]);
quadGeometry.setIndex(new THREE.BufferAttribute(indices, 1));

// quadGeometry.setAttribute( 'normal', new THREE.BufferAttribute( quadNormals, 3 ) );
// quadGeometry.setAttribute( 'uv', new THREE.BufferAttribute( triangleUVs, 2 ) );

// const quadMaterial = new THREE.MeshBasicMaterial( { color: 0x007700 } );
const quadMaterial = new THREE.ShaderMaterial( {

	vertexShader: vs,
	fragmentShader: fs

} );

export let gameObjects = [
    {
        key: `initBlock:${0},${0},${0}:0`,
        p1x: 0,
        p1y: 0,
        p1z: 0,

        p2x: 0,
        p2y: 0,
        p2z: 1,

        p3x: 1,
        p3y: 0,
        p3z: 0,
    },
    // {
    //     key: `initBlock:${0},${0},${0}:+x`,
    //     px: 0,
    //     py: 0,
    //     pz: 0,
    //     side: "+x",
    // },
    // {
    //     key: `initBlock:${0},${0},${0}:-y`,
    //     px: 0,
    //     py: 0,
    //     pz: 0,
    //     side: "-y",
    // },
    // {
    //     key: `initBlock:${0},${0},${0}:-y`,
    //     px: 0,
    //     py: 0,
    //     pz: 0,
    //     side: "-y",
    // },
    // {
    //     key: `initBlock:${0},${0},${0}:-z`,
    //     px: 0,
    //     py: 0,
    //     pz: 0,
    //     side: "-z",
    // },
    // {
    //     key: `initBlock:${0},${0},${0}:+z`,
    //     px: 0,
    //     py: 0,
    //     pz: 0,
    //     side: "+z",
    // }
];

export let quadMeshInstanceIDKeys = {};

export function redrawObjects(){
    const instanceCount = Math.min(gameObjects.length, 1000*1000); // Example: 100 instances

    const colors = new Float32Array(instanceCount * 4); // 4 for RGBA
    for (let i = 0; i < instanceCount; i++) {
    colors[i * 4] = Math.random(); // R
    colors[i * 4 + 1] = Math.random(); // G
    colors[i * 4 + 2] = Math.random(); // B
    colors[i * 4 + 3] = 1.0;
    }
    quadGeometry.setAttribute('rgba', new THREE.InstancedBufferAttribute(colors, 4));

    let quadMesh = new THREE.InstancedMesh( quadGeometry, quadMaterial, instanceCount);

    quadMeshInstanceIDKeys[quadMesh.uuid] = {};

    const matrix = new THREE.Matrix4();
    const position = new THREE.Vector3();
    const rotation = new THREE.Euler();
    const scale = new THREE.Vector3(1, 1, 1); // Uniform scale for simplicity
    const color = new THREE.Color();


    for (let i = 0.0; i < instanceCount; i++) {
        let gameObject = gameObjects[i];

        let j = quadMesh.count
        let k = quadMesh.count

        let matrix = new THREE.Matrix4();
        matrix.set( gameObject.p2x - gameObject.p1x, 0, gameObject.p3x - gameObject.p1x, gameObject.p1x,
                    gameObject.p2y - gameObject.p1y, 1, gameObject.p3y - gameObject.p1y, gameObject.p1y,
                    gameObject.p2z - gameObject.p1z, 0, gameObject.p3z - gameObject.p1z, gameObject.p1z,
                    0,                               0, 0,                               1  );
        quadMesh.setMatrixAt(j++, matrix);
        quadMesh.instanceMatrix.needsUpdate = true;


        matrix.set(
                    1, 0, 0, 0,
                    0, 1, 0, 1,
                    0, 0, 1, 0,
                    0, 0, 0, 1  );

        matrix.toArray( quadMesh.instanceNormalMatrix.array, k * 16 );
        quadMesh.instanceNormalMatrix.needsUpdate = true;

        // matrix.set( gameObject.uv2x - gameObject.uv1x, gameObject.uv3x - gameObject.uv1x, 0, gameObject.uv1x,
        //             gameObject.uv2y - gameObject.uv1y, gameObject.uv3y - gameObject.uv1y, 0, gameObject.uv1y,
        //             0, 0, 1, 1,
        //             0, 0, 0, 1);
        // matrix.toArray( quadMesh.instanceUVMatrix.array, k * 16 );
        // quadMesh.instanceUVMatrix.needsUpdate = true;

        // position.set(
        //     x,
        //     y,
        //     z
        // );

        // Set random rotations as an example
        // rotation.setFromEuler(new THREE.Euler(
        //     0.0,
        //     0.0,
        //     0.0
        //     // Math.random() * Math.PI * 2, // Random rotation around X
        //     // Math.random() * Math.PI * 2, // Random rotation around Y
        //     // Math.random() * Math.PI * 2  // Random rotation around Z
        // ));
        // rotation.set(
        //     0.0,
        //     0.0,
        //     0.0
        // );

        // color.setHex( Math.random() * 0xffffff );

        // matrix.compose(position, rotation, scale);
        // matrix.compose(position, new THREE.Quaternion().setFromEuler(rotation), scale);
        // matrix.setPosition(position);
        // quadMesh.setMatrixAt(i, matrix);
        // quadMesh.setColorAt( i, color );
    }

    quadMesh.instanceMatrix.needsUpdate = true; // Important!

    objectScene.add(quadMesh);
}



